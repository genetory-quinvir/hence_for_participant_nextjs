'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { RaffleItem, RafflePrize } from '@/types/api';

interface RaffleParticipant {
  id: string;
  name: string;
  email: string;
  phone?: string;
  eventId: string;
  registeredAt: string;
  isWinner?: boolean;
}

// Í∏∞Ï°¥ RaffleEvent Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Îäî EventItemÏúºÎ°ú ÎåÄÏ≤¥

export default function AdminRafflePage() {
  const router = useRouter();
  const [isAdmin, setIsAdmin] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [raffleData, setRaffleData] = useState<RaffleItem | null>(null);
  const [isLoadingRaffle, setIsLoadingRaffle] = useState(false);
  const [isRaffling, setIsRaffling] = useState(false);
  const [currentWinner, setCurrentWinner] = useState<RaffleParticipant | null>(null);
  const [isSlotMachine, setIsSlotMachine] = useState(false);
  const [slotName, setSlotName] = useState('');
  const [slotPhone, setSlotPhone] = useState('');
  const [showWinnerPopup, setShowWinnerPopup] = useState(false);
  const [winnerQueue, setWinnerQueue] = useState<RaffleParticipant[]>([]);
  const [currentWinnerIndex, setCurrentWinnerIndex] = useState(0);
  const [currentPrizeId, setCurrentPrizeId] = useState<string>('');
  const [isPopupRaffling, setIsPopupRaffling] = useState(false);
  const [prizes, setPrizes] = useState<{
    id: string;
    name: string;
    description: string;
    icon: string;
    isDrawn: boolean;
    winners: RaffleParticipant[];
    rank: string;
    winnerCount: number;
  }[]>([]);

  // Admin Í∂åÌïú Í≤ÄÏ¶ù
  useEffect(() => {
    const checkAdminAuth = async () => {
      try {
        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
        const userData = localStorage.getItem('user');
        
        if (!userData) {
          alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
          router.push('/sign');
          return;
        }

        const user = JSON.parse(userData);
        console.log('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', user); // ÎîîÎ≤ÑÍπÖÏö©
        console.log('ÏÇ¨Ïö©Ïûê role:', user.role); // ÎîîÎ≤ÑÍπÖÏö©
        
        if (user.role === 'admin') {
          setIsAdmin(true);
          await loadRaffleData('3158612a-6764-11f0-aaae-6de7418cfa45');
        } else {
          console.log('Admin Í∂åÌïú ÏóÜÏùå:', user); // ÎîîÎ≤ÑÍπÖÏö©
          const userRole = user.role || 'ÏóÜÏùå';
          alert(`Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.\nÌòÑÏû¨ role: "${userRole}"\nÌïÑÏöîÌïú role: "admin"`);
          router.push('/');
        }
      } catch (error) {
        console.error('Admin Í∂åÌïú ÌôïÏù∏ Ïã§Ìå®:', error);
        alert('Í∂åÌïú ÌôïÏù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        router.push('/');
      } finally {
        setIsLoading(false);
      }
    };

    checkAdminAuth();
  }, [router]);


  // ÎûòÌîå Ï†ïÎ≥¥ Î°úÎìú (ÏßÅÏ†ë API Ìò∏Ï∂ú)
  const loadRaffleData = async (eventId: string) => {
    setIsLoadingRaffle(true);
    try {
      console.log('üîÑ ÎûòÌîå Ï†ïÎ≥¥ Î°úÎìú ÏãúÏûë...', eventId);
      
      // ÏßÅÏ†ë API Ìò∏Ï∂ú
      const response = await fetch(`https://api-participant.hence.events/raffles/${eventId}/153d5d80-62e9-11f0-aaae-6de7418cfa44`, {
        method: 'GET',
        headers: {
          'accept': 'application/json',
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`API ÏöîÏ≤≠ Ïã§Ìå®: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ ÎûòÌîå Ï†ïÎ≥¥ Î°úÎìú ÏÑ±Í≥µ:', data);
      
      if (data.data) {
        setRaffleData(data.data);
        
        // ÏÉÅÌíà Ï†ïÎ≥¥Î•º prizes ÏÉÅÌÉúÎ°ú Î≥ÄÌôò (Íº¥Îì±Î∂ÄÌÑ∞ 1Îì±ÍπåÏßÄ ÏàúÏÑúÎ°ú Ï†ïÎ†¨)
        if (data.data.prizes && data.data.prizes.length > 0) {
          const convertedPrizes = data.data.prizes.map((prize: any) => ({
            id: prize.id,
            name: prize.prizeName,
            description: prize.prizeDescription,
            icon: getPrizeIcon(prize.prizeRank),
            isDrawn: false,
            winners: [],
            rank: prize.prizeRank,
            winnerCount: prize.winnerCount
          }));
          
          // PÎì±Î∂ÄÌÑ∞ 1Îì±ÍπåÏßÄ ÏàúÏÑúÎ°ú Ï†ïÎ†¨
          const sortedPrizes = convertedPrizes.sort((a: any, b: any) => {
            const rankOrder = { 'P': 0, '3': 1, '2': 2, '1': 3 };
            return rankOrder[a.rank as keyof typeof rankOrder] - rankOrder[b.rank as keyof typeof rankOrder];
          });
          
          setPrizes(sortedPrizes);
          console.log('‚úÖ ÏÉÅÌíà Ï†ïÎ≥¥ Î≥ÄÌôò ÏôÑÎ£å (Ï†ïÎ†¨Îê®):', sortedPrizes);
        } else {
          console.log('‚ö†Ô∏è ÏÉÅÌíà Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
          setPrizes([]);
        }
      } else {
        console.error('‚ùå ÎûòÌîå Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
        setRaffleData(null);
        setPrizes([]);
      }
    } catch (error) {
      console.error('‚ùå ÎûòÌîå Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®:', error);
      alert('ÎûòÌîå Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error);
      setRaffleData(null);
      setPrizes([]);
    } finally {
      setIsLoadingRaffle(false);
    }
  };

  // ÏÉÅÌíà Îì±Í∏âÏóê Îî∞Î•∏ ÏïÑÏù¥ÏΩò Î∞òÌôò
  const getPrizeIcon = (rank: string) => {
    switch (rank) {
      case '1':
        return 'üèÜ';
      case '2':
        return 'ü•à';
      case '3':
        return 'ü•â';
      case 'P':
        return 'üéÅ';
      default:
        return 'üéÅ';
    }
  };



  // ÌåùÏóÖ Ïó¥Í∏∞ (Ïã§Ï†ú Ï∂îÏ≤®ÏùÄ ÌïòÏßÄ ÏïäÏùå)
  const openRafflePopup = (prizeId: string) => {
    console.log('üé™ ÌåùÏóÖ Ïó¥Í∏∞:', { prizeId });
    setCurrentPrizeId(prizeId);
    setShowWinnerPopup(true);
    setCurrentWinnerIndex(0);
    setWinnerQueue([]);
    setCurrentWinner(null);
    setIsPopupRaffling(false);
  };

  // ÌåùÏóÖ ÎÇ¥ÏóêÏÑú Ïã§Ï†ú Ï∂îÏ≤® Ïã§Ìñâ
  const runPopupRaffle = async () => {
    console.log('üé≤ Ï∂îÏ≤® ÏãúÏûë!', { currentPrizeId, isPopupRaffling });
    
    if (!currentPrizeId) {
      console.error('‚ùå currentPrizeIdÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!');
      return;
    }
    
    setIsPopupRaffling(true);
    
    try {
      // Î™©ÏóÖ Ï∞∏Ïó¨Ïûê Îç∞Ïù¥ÌÑ∞ (Îçî ÎßéÏùÄ Ï∞∏Ïó¨Ïûê Ï∂îÍ∞Ä)
      const mockParticipants = [
        { id: '1', name: 'ÍπÄÏ≤†Ïàò', email: 'kim@example.com', phone: '010-1234-5678', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '2', name: 'Ïù¥ÏòÅÌù¨', email: 'lee@example.com', phone: '010-2345-6789', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '3', name: 'Î∞ïÎØºÏàò', email: 'park@example.com', phone: '010-3456-7890', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '4', name: 'ÏµúÏßÄÏòÅ', email: 'choi@example.com', phone: '010-4567-8901', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '5', name: 'Ï†ïÌòÑÏö∞', email: 'jung@example.com', phone: '010-5678-9012', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '6', name: 'ÌïúÏÜåÏòÅ', email: 'han@example.com', phone: '010-6789-0123', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '7', name: 'Ïú§ÌÉúÌò∏', email: 'yoon@example.com', phone: '010-7890-1234', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '8', name: 'Í∞ïÎØ∏Îûò', email: 'kang@example.com', phone: '010-8901-2345', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '9', name: 'ÏûÑÎèôÌòÑ', email: 'lim@example.com', phone: '010-9012-3456', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '10', name: 'ÏÜ°ÌïòÎäò', email: 'song@example.com', phone: '010-0123-4567', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '11', name: 'Ï°∞ÎØºÌò∏', email: 'cho@example.com', phone: '010-1111-2222', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '12', name: 'ÏÑúÏßÄÏùÄ', email: 'seo@example.com', phone: '010-3333-4444', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '13', name: 'Ïò§Ï§ÄÏÑù', email: 'oh@example.com', phone: '010-5555-6666', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '14', name: 'Î∞∞ÏàòÏßÑ', email: 'bae@example.com', phone: '010-7777-8888', eventId: 'event1', registeredAt: '2024-01-01' },
        { id: '15', name: 'ÎÇ®Í∂ÅÎØº', email: 'nam@example.com', phone: '010-9999-0000', eventId: 'event1', registeredAt: '2024-01-01' }
      ];
      
      // ÌòÑÏû¨ ÏÉÅÌíàÏùò winnerCount Í∞ÄÏ†∏Ïò§Í∏∞
      const currentPrize = prizes.find(prize => prize.id === currentPrizeId);
      const winnerCount = currentPrize?.winnerCount || 1;
      console.log('üéØ ÏÉÅÌíà Ï†ïÎ≥¥:', { currentPrize, winnerCount });
      
      // Fisher-Yates ÏÖîÌîå ÏïåÍ≥†Î¶¨Ï¶òÏúºÎ°ú Í≥µÏ†ïÌïú Ï∂îÏ≤®
      const shuffled = [...mockParticipants];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
      }
      
      // winnerCountÎßåÌÅº ÎãπÏ≤®Ïûê ÏÑ†Ï†ï
      const winners = shuffled.slice(0, winnerCount);
      console.log('üèÜ ÎãπÏ≤®Ïûê ÏÑ†Ï†ï:', winners);
      
      // ÏÉÅÌíàÏóê ÎãπÏ≤®ÏûêÎì§ ÏÑ§Ï†ï
      setPrizes(prev => prev.map(prize => 
        prize.id === currentPrizeId 
          ? { ...prize, isDrawn: true, winners: winners }
          : prize
      ));
      
      // ÎãπÏ≤®ÏûêÎì§ÏùÑ ÌÅêÏóê ÎÑ£Í≥† Ïä¨Î°ØÎ®∏Ïã† ÏãúÏûë
      if (winners.length > 0) {
        console.log('üé∞ Ïä¨Î°ØÎ®∏Ïã† ÏãúÏûë');
        setWinnerQueue(winners);
        setCurrentWinnerIndex(0);
        setCurrentWinner(winners[0]);
        runSlotMachineForPopup(winners[0]);
      }

    } catch (error) {
      console.error('Ï∂îÏ≤® Ïã§Ìñâ Ïã§Ìå®:', error);
    } finally {
      setIsPopupRaffling(false);
    }
  };

  // Ï∂îÏ≤® Ïù¥Î†• Î°úÎìú
  const loadRaffleHistory = async () => {
    try {
      const response = await fetch('/api/admin/raffle/history', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Ï∂îÏ≤® Ïù¥Î†•:', data.history || []);
      }
    } catch (error) {
      console.error('Ï∂îÏ≤® Ïù¥Î†• Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  // Ïù¥Î¶Ñ ÎßàÏä§ÌÇπ Ìï®Ïàò
  const maskName = (name: string) => {
    if (name.length <= 2) {
      return name.charAt(0) + '*';
    } else {
      return name.charAt(0) + '*'.repeat(name.length - 2) + name.charAt(name.length - 1);
    }
  };

  // Ïä¨Î°ØÎ®∏Ïã† Ìö®Í≥ºÎ•º ÏúÑÌïú ÎûúÎç§ ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
  const generateRandomText = (type: 'name' | 'phone') => {
    if (type === 'name') {
      const names = ['ÍπÄÏ≤†Ïàò', 'Ïù¥ÏòÅÌù¨', 'Î∞ïÎØºÏàò', 'ÏµúÏßÄÏòÅ', 'Ï†ïÌòÑÏö∞', 'ÌïúÏÜåÏòÅ', 'Ïú§ÌÉúÌò∏', 'Í∞ïÎØ∏Îûò', 'ÏûÑÎèôÌòÑ', 'ÏÜ°ÌïòÎäò', 'Ï°∞ÎØºÌò∏', 'ÏÑúÏßÄÏùÄ', 'Ïò§Ï§ÄÏÑù', 'Î∞∞ÏàòÏßÑ', 'ÎÇ®Í∂ÅÎØº'];
      return maskName(names[Math.floor(Math.random() * names.length)]);
    } else {
      const phones = ['1234', '2345', '3456', '4567', '5678', '6789', '7890', '8901', '9012', '0123'];
      return phones[Math.floor(Math.random() * phones.length)];
    }
  };

  // Îã§Ïùå ÎãπÏ≤®ÏûêÎ°ú Ïù¥Îèô
  const showNextWinner = () => {
    if (currentWinnerIndex < winnerQueue.length - 1) {
      const nextIndex = currentWinnerIndex + 1;
      setCurrentWinnerIndex(nextIndex);
      setCurrentWinner(winnerQueue[nextIndex]);
      // Ïä¨Î°ØÎ®∏Ïã† Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë
      runSlotMachineForPopup(winnerQueue[nextIndex]);
    } else {
      // Î™®Îì† ÎãπÏ≤®Ïûê ÌëúÏãú ÏôÑÎ£å
      setShowWinnerPopup(false);
      setWinnerQueue([]);
      setCurrentWinnerIndex(0);
    }
  };

  // ÌåùÏóÖ Îã´Í∏∞
  const closeWinnerPopup = () => {
    setShowWinnerPopup(false);
    setWinnerQueue([]);
    setCurrentWinnerIndex(0);
  };

  // ÌòÑÏû¨ ÏÉÅÌíà Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const getCurrentPrize = () => {
    return prizes.find(prize => prize.winners.some(winner => winner.id === currentWinner?.id));
  };

  // Ïä¨Î°ØÎ®∏Ïã† Ïï†ÎãàÎ©îÏù¥ÏÖò (ÌåùÏóÖÏö© - ÏûêÎèô Ï¢ÖÎ£å ÏóÜÏùå)
  const runSlotMachineForPopup = (targetWinner: RaffleParticipant) => {
    setIsSlotMachine(true);
    let count = 0;
    const maxCount = 20; // Ïä¨Î°ØÎ®∏Ïã†Ïù¥ ÎèåÏïÑÍ∞ÄÎäî ÌöüÏàò
    
    const interval = setInterval(() => {
      setSlotName(generateRandomText('name'));
      setSlotPhone(generateRandomText('phone'));
      count++;
      
      if (count >= maxCount) {
        clearInterval(interval);
        // ÏµúÏ¢Ö Í≤∞Í≥º ÏÑ§Ï†ï
        setSlotName(maskName(targetWinner.name));
        setSlotPhone(targetWinner.phone ? targetWinner.phone.slice(-4) : '0000');
        setIsSlotMachine(false);
        // ÌåùÏóÖÏóêÏÑúÎäî ÏûêÎèô Ï¢ÖÎ£åÌïòÏßÄ ÏïäÏùå
      }
    }, 100); // 100msÎßàÎã§ Î≥ÄÍ≤Ω
  };

  // Ïä¨Î°ØÎ®∏Ïã† Ïï†ÎãàÎ©îÏù¥ÏÖò (Í∏∞Ï°¥Ïö© - ÏûêÎèô Ï¢ÖÎ£å ÏûàÏùå)
  const runSlotMachine = (targetWinner: RaffleParticipant) => {
    setIsSlotMachine(true);
    let count = 0;
    const maxCount = 20; // Ïä¨Î°ØÎ®∏Ïã†Ïù¥ ÎèåÏïÑÍ∞ÄÎäî ÌöüÏàò
    
    const interval = setInterval(() => {
      setSlotName(generateRandomText('name'));
      setSlotPhone(generateRandomText('phone'));
      count++;
      
      if (count >= maxCount) {
        clearInterval(interval);
        // ÏµúÏ¢Ö Í≤∞Í≥º ÏÑ§Ï†ï
        setSlotName(maskName(targetWinner.name));
        setSlotPhone(targetWinner.phone ? targetWinner.phone.slice(-4) : '0000');
        setIsSlotMachine(false);
        
        // 3Ï¥à ÌõÑ ÌòÑÏû¨ ÎãπÏ≤®Ïûê Ï¥àÍ∏∞Ìôî
        setTimeout(() => {
          setCurrentWinner(null);
        }, 3000);
      }
    }, 100); // 100msÎßàÎã§ Î≥ÄÍ≤Ω
  };


  // Ï∂îÏ≤® Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
  const resetRaffle = () => {
    setCurrentWinner(null);
    setSlotName('');
    setSlotPhone('');
    setPrizes(prev => prev.map(prize => ({ ...prize, isDrawn: false, winners: [] })));
    setShowWinnerPopup(false);
    setWinnerQueue([]);
    setCurrentWinnerIndex(0);
    setCurrentPrizeId('');
    setIsPopupRaffling(false);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏùÑ ÌôïÏù∏ÌïòÎäî Ï§ë...</p>
        </div>
      </div>
    );
  }

  if (!isAdmin) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600 mb-4">Ï†ëÍ∑º Í∂åÌïú ÏóÜÏùå</h1>
          <p className="text-gray-600">Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.</p>
        </div>
      </div>
    );
  }

  return (
    <div 
      className="min-h-screen relative overflow-hidden"
      style={{
        width: '100vw !important',
        maxWidth: 'none !important',
        margin: '0 !important',
        padding: '0 !important',
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
      }}
    >
      {/* ÌôîÎ†§Ìïú Î∞∞Í≤Ω Ïï†ÎãàÎ©îÏù¥ÏÖò */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-yellow-400 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-pink-400 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-pulse" style={{ animationDelay: '2s' }}></div>
        <div className="absolute top-40 left-40 w-80 h-80 bg-blue-400 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-pulse" style={{ animationDelay: '4s' }}></div>
        <div className="absolute bottom-40 right-40 w-80 h-80 bg-green-400 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-pulse" style={{ animationDelay: '6s' }}></div>
      </div>

      {/* Í≥†Ï†ï ÌÉÄÏù¥ÌãÄ - Ï¢åÏ∏° ÏÉÅÎã® */}
      <div className="fixed top-6 left-6 z-20">
        <h1 className="text-4xl font-bold text-white drop-shadow-lg">
          ÏÑúÏö∏Í≥ºÌïôÍ∏∞Ïà†ÎåÄ ÌöÉÎ∂àÏ†ú X HENCE
        </h1>
        <p className="text-lg text-white/90 drop-shadow-md mt-2">
          ÌñâÏö¥Ïùò ÎãπÏ≤®ÏûêÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî!
        </p>
      </div>

      {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
      <div className="relative z-10 flex flex-col items-center justify-center min-h-screen p-8">

        {/* ÏÉÅÌíà Ïä¨ÎùºÏù¥Îìú Ïáº */}
        <div className="mb-8 w-full max-w-6xl">
          
          {isLoadingRaffle ? (
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
              <p className="text-white/90">ÎûòÌîå Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
            </div>
          ) : prizes.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {prizes.map((prize, index) => (
                <div key={prize.id} className="bg-white/20 backdrop-blur-lg rounded-3xl p-6 border border-white/30 shadow-2xl">
                  <div className="text-center">
                    <div className="text-6xl mb-4">{prize.icon}</div>
                    <h3 className="text-2xl font-bold text-white mb-2">{prize.name}</h3>
                    <p className="text-lg text-white/90 mb-2">{prize.description}</p>
                    <p className="text-sm text-white/70 mb-4">{prize.rank}Îì± ‚Ä¢ {prize.winnerCount}Î™Ö ÎãπÏ≤®</p>
                    
                    {prize.isDrawn && prize.winners.length > 0 && (
                      <div className="bg-green-500/20 rounded-2xl p-4 mb-4 border border-green-400/30">
                        <div className="text-lg font-bold text-green-300 mb-3">üéâ ÎãπÏ≤®Ïûê ({prize.winners.length}Î™Ö)</div>
                        {prize.winners.map((winner, index) => (
                          <div key={winner.id} className="mb-2 last:mb-0">
                            <div className="text-lg font-semibold text-white">{maskName(winner.name)}</div>
                            <div className="text-sm text-white/80">üì± ****-****-{winner.phone ? winner.phone.slice(-4) : '0000'}</div>
                          </div>
                        ))}
                      </div>
                    )}
                    
                    <button
                      onClick={() => openRafflePopup(prize.id)}
                      disabled={prize.isDrawn}
                      className={`w-full py-4 px-6 rounded-full font-bold text-lg transition-all duration-300 ${
                        prize.isDrawn
                          ? 'bg-gray-500 text-gray-300 cursor-not-allowed'
                          : 'bg-gradient-to-r from-yellow-400 to-orange-500 text-white hover:shadow-2xl transform hover:scale-105'
                      }`}
                    >
                      {prize.isDrawn ? 'Ï∂îÏ≤® ÏôÑÎ£å' : 'üé≤ Ï∂îÏ≤®ÌïòÍ∏∞'}
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center">
              <div className="text-6xl mb-4">üì≠</div>
              <h3 className="text-2xl font-bold text-white mb-2">ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§</h3>
              <p className="text-white/80">Ïù¥ Ïù¥Î≤§Ìä∏ÏóêÎäî Ï∂îÏ≤® ÏÉÅÌíàÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.</p>
            </div>
          )}
        </div>


        {/* ÎãπÏ≤®Ïûê ÌåùÏóÖ */}
        {showWinnerPopup && (
          <div className="fixed inset-0 bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center z-50 p-4">
            {/* Î≥ÑÎπõ Ìö®Í≥º */}
            <div className="absolute inset-0 overflow-hidden">
              <div className="absolute top-10 left-10 w-2 h-2 bg-yellow-300 rounded-full animate-ping"></div>
              <div className="absolute top-20 right-20 w-1 h-1 bg-white rounded-full animate-pulse"></div>
              <div className="absolute bottom-20 left-20 w-1.5 h-1.5 bg-yellow-200 rounded-full animate-ping delay-1000"></div>
              <div className="absolute bottom-10 right-10 w-1 h-1 bg-white rounded-full animate-pulse delay-500"></div>
              <div className="absolute top-1/2 left-1/4 w-1 h-1 bg-yellow-300 rounded-full animate-ping delay-700"></div>
              <div className="absolute top-1/3 right-1/3 w-1.5 h-1.5 bg-white rounded-full animate-pulse delay-300"></div>
            </div>

            <div className="bg-gradient-to-br from-yellow-400 via-orange-500 to-red-500 rounded-3xl shadow-2xl max-w-2xl w-full mx-4 overflow-hidden relative">
              {/* Î∞òÏßùÏù¥Îäî Ìö®Í≥º */}
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -skew-x-12 animate-pulse"></div>
              
              {/* Ìó§Îçî */}
              <div className="relative px-8 py-6 text-center">
                <button
                  onClick={closeWinnerPopup}
                  className="absolute top-4 right-4 w-10 h-10 bg-white/20 rounded-full flex items-center justify-center text-white hover:bg-white/30 transition-all text-xl"
                >
                  ‚úï
                </button>
              </div>

              {/* ÏÉÅÌíà Ï†ïÎ≥¥ */}
              {getCurrentPrize() && (
                <div className="px-8 py-4 text-center">
                  <div className="text-8xl mb-4 animate-pulse">{getCurrentPrize()?.icon}</div>
                  <h3 className="text-3xl font-bold text-white mb-2 drop-shadow-lg">{getCurrentPrize()?.name}</h3>
                  <p className="text-lg text-white/90 font-medium">{getCurrentPrize()?.description}</p>
                </div>
              )}

              {/* ÎãπÏ≤®Ïûê Ï†ïÎ≥¥ */}
              <div className="px-8 py-6">
                {winnerQueue.length === 0 ? (
                  // Ï∂îÏ≤® Ï†Ñ ÌôîÎ©¥
                  <div className="text-center">
                    <div className="text-6xl mb-6 animate-bounce">üé∞</div>
                    <div className="text-3xl font-black text-white mb-6 drop-shadow-lg">
                      Ï∂îÏ≤®ÏùÑ ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?
                    </div>
                    <button
                      onClick={() => {
                        console.log('üîò Ï∂îÏ≤® ÏãúÏûë Î≤ÑÌäº ÌÅ¥Î¶≠', { isPopupRaffling, currentPrizeId });
                        alert('Î≤ÑÌäºÏù¥ ÌÅ¥Î¶≠ÎêòÏóàÏäµÎãàÎã§!');
                        runPopupRaffle();
                      }}
                      disabled={isPopupRaffling}
                      className={`bg-white text-orange-600 font-black text-2xl py-4 px-8 rounded-2xl hover:bg-white/90 transition-all transform hover:scale-105 shadow-xl ${
                        isPopupRaffling ? 'opacity-50 cursor-not-allowed' : ''
                      }`}
                    >
                      {isPopupRaffling ? 'Ï∂îÏ≤® Ï§ë...' : 'üé≤ Ï∂îÏ≤® ÏãúÏûë!'}
                    </button>
                  </div>
                ) : (
                  // Ï∂îÏ≤® ÌõÑ ÌôîÎ©¥
                  <>
                    <div className="text-center mb-8">
                      <div className="text-5xl font-black text-white mb-4 drop-shadow-lg animate-pulse">
                        üéâ {currentWinnerIndex + 1}Î≤àÏß∏ ÎãπÏ≤®Ïûê üéâ
                      </div>
                    </div>
                
                {/* Ïù¥Î¶Ñ Ïä¨Î°ØÎ®∏Ïã† */}
                {currentWinner && (
                  <div className="mb-6">
                    <div className="bg-white/20 backdrop-blur-sm rounded-2xl p-6 min-h-[80px] flex items-center justify-center">
                      {isSlotMachine ? (
                        <span className="text-4xl font-black text-white animate-pulse drop-shadow-lg">
                          {generateRandomText('name')}
                        </span>
                      ) : (
                        <span className="text-5xl font-black text-white animate-fadeIn drop-shadow-lg">
                          {maskName(currentWinner.name)}
                        </span>
                      )}
                    </div>
                  </div>
                )}
                
                {/* Ï†ÑÌôîÎ≤àÌò∏ Ïä¨Î°ØÎ®∏Ïã† */}
                {currentWinner && (
                  <div className="mb-8">
                    <div className="bg-white/20 backdrop-blur-sm rounded-2xl p-6 min-h-[70px] flex items-center justify-center">
                      {isSlotMachine ? (
                        <span className="text-3xl font-black text-white animate-pulse drop-shadow-lg">
                          ****-****-{generateRandomText('phone')}
                        </span>
                      ) : (
                        <span className="text-4xl font-black text-white animate-fadeIn drop-shadow-lg">
                          ****-****-{currentWinner.phone ? currentWinner.phone.slice(-4) : '0000'}
                        </span>
                      )}
                    </div>
                  </div>
                )}

                {/* ÏßÑÌñâ ÏÉÅÌô© */}
                <div className="mb-8">
                  <div className="flex justify-center gap-3">
                    {winnerQueue.map((_, index) => (
                      <div
                        key={index}
                        className={`w-4 h-4 rounded-full transition-all duration-500 ${
                          index <= currentWinnerIndex 
                            ? 'bg-white shadow-lg scale-125' 
                            : 'bg-white/30'
                        }`}
                      />
                    ))}
                  </div>
                </div>
                  </>
                )}
              </div>

              {/* Î≤ÑÌäºÎì§ */}
              {winnerQueue.length > 0 && (
                <div className="px-8 py-6">
                  <div className="flex gap-4">
                    {!isSlotMachine && (
                      <>
                        {currentWinnerIndex < winnerQueue.length - 1 ? (
                          <button
                            onClick={showNextWinner}
                            className="flex-1 bg-white text-orange-600 font-black text-xl py-4 px-6 rounded-2xl hover:bg-white/90 transition-all transform hover:scale-105 shadow-xl"
                          >
                            üéØ Îã§Ïùå ÎãπÏ≤®Ïûê Î≥¥Í∏∞
                          </button>
                        ) : (
                          <button
                            onClick={closeWinnerPopup}
                            className="flex-1 bg-white text-green-600 font-black text-xl py-4 px-6 rounded-2xl hover:bg-white/90 transition-all transform hover:scale-105 shadow-xl"
                          >
                            ‚ú® ÏôÑÎ£å
                          </button>
                        )}
                      </>
                    )}
                    
                    {isSlotMachine && (
                      <div className="flex-1 bg-white/20 backdrop-blur-sm text-white font-black text-xl py-4 px-6 rounded-2xl text-center">
                        üé∞ Ï∂îÏ≤® Ï§ë...
                      </div>
                    )}
                    
                    <button
                      onClick={closeWinnerPopup}
                      className="px-6 py-4 bg-white/20 backdrop-blur-sm text-white font-bold text-lg rounded-2xl hover:bg-white/30 transition-all"
                    >
                      Îã´Í∏∞
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Ï¥àÍ∏∞Ìôî Î≤ÑÌäº - Ïö∞Ï∏° ÌïòÎã® Í≥†Ï†ï */}
        {prizes.some(prize => prize.isDrawn) && (
          <button
            onClick={resetRaffle}
            className="fixed bottom-6 right-6 px-4 py-2 bg-gray-600/60 backdrop-blur-lg text-white text-sm font-medium rounded-lg hover:bg-gray-700/80 transition-all duration-300 shadow-lg opacity-70 hover:opacity-100"
          >
            üîÑ Îã§Ïãú Ï∂îÏ≤®
          </button>
        )}
      </div>
    </div>
  );
}
